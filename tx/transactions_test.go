// Copyright (c) 2023 The VeChainThor developers

// Distributed under the GNU Lesser General Public License v3.0 software license, see the accompanying
// file LICENSE or <https://www.gnu.org/licenses/lgpl-3.0.html>

package tx_test

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/vechain/thor/v2/thor"
	"github.com/vechain/thor/v2/tx"
)

func TestRootHash(t *testing.T) {
	// Test empty transactions slice
	test := []struct {
		name           string
		txs            tx.Transactions
		expectedResult thor.Bytes32
	}{
		{
			name:           "empty transactions slice",
			txs:            tx.Transactions{},
			expectedResult: thor.Bytes32{0x45, 0xb0, 0xcf, 0xc2, 0x20, 0xce, 0xec, 0x5b, 0x7c, 0x1c, 0x62, 0xc4, 0xd4, 0x19, 0x3d, 0x38, 0xe4, 0xeb, 0xa4, 0x8e, 0x88, 0x15, 0x72, 0x9c, 0xe7, 0x5f, 0x9c, 0xa, 0xb0, 0xe4, 0xc1, 0xc0},
		},
		{
			name:           "non-empty legacy transactions slice",
			txs:            tx.Transactions{GetMockTx(tx.TypeLegacy), GetMockTx(tx.TypeLegacy)},
			expectedResult: thor.Bytes32{0x30, 0x9a, 0xd5, 0x4b, 0x28, 0x76, 0x65, 0x52, 0x66, 0x89, 0x7b, 0x19, 0x22, 0x24, 0x63, 0xd8, 0x27, 0xc8, 0x2a, 0xd6, 0x20, 0x17, 0x7a, 0xcf, 0x9a, 0xfa, 0xc, 0xce, 0xff, 0x12, 0x24, 0x48},
		},
		{
			name:           "non-empty dyn fee transactions slice",
			txs:            tx.Transactions{GetMockTx(tx.TypeDynamicFee), GetMockTx(tx.TypeDynamicFee)},
			expectedResult: thor.Bytes32{0xb6, 0xa5, 0x78, 0x74, 0x34, 0x61, 0xfb, 0xd5, 0x53, 0x95, 0x5, 0xe0, 0x91, 0xfe, 0x34, 0x3b, 0xf8, 0xcf, 0xa4, 0x50, 0xa9, 0xb6, 0x7f, 0x18, 0x37, 0x8a, 0xbb, 0x4d, 0x9, 0xda, 0x32, 0xe8},
		},
		{
			name:           "non-empty mixed transactions slice",
			txs:            tx.Transactions{GetMockTx(tx.TypeLegacy), GetMockTx(tx.TypeDynamicFee), GetMockTx(tx.TypeDynamicFee), GetMockTx(tx.TypeLegacy)},
			expectedResult: thor.Bytes32{0x11, 0xe6, 0xdc, 0x2f, 0xd3, 0x3b, 0x7c, 0xa7, 0xf9, 0xad, 0x6e, 0xeb, 0xff, 0x6c, 0xc8, 0x45, 0xa5, 0x61, 0xaf, 0x23, 0x9, 0x4a, 0x89, 0x78, 0xd7, 0x3b, 0xf4, 0xdf, 0x65, 0x1c, 0x5d, 0x90},
		},
	}

	for _, tt := range test {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.expectedResult, tt.txs.RootHash())
		})
	}
}
