openapi: 3.0.3
info:
  title: Thorest API
  description: |
    
    RESTful API to access VechainThor Network
    
    [Project Home](https://github.com/vechain/thor)
    
    ⚠️ <b>Note:</b> The examples given in this specification are optimized for mainnet. 

  license:
    name: LGPL 3.0
    url: https://www.gnu.org/licenses/lgpl-3.0.en.html
  version: 2.2.1
servers:
  - url: /
    description: Current Node
tags:
  - name: Accounts
    description: |
      Provides access to on-chain account information. This includes details about account balances, contract states, and related functionalities.
  - name: Transactions
    description: |
      Manages blockchain transactions, enabling the creation, retrieval, and verification of transactions on the blockchain.
  - name: Blocks
    description: |
      Retrieves information about on-chain blocks.
  - name: Logs
    description: |
      Query on-chain logs stemming from transaction outputs. This feature empowers users to delve into the intricacies of transaction history, providing a comprehensive view of on-chain activities.
  - name: Node
    description: |
      Provides information about the node's status.
  - name: Subscriptions
    description: |
      Facilitates WebSocket-based interactions with the blockchain, allowing users to subscribe to real-time events, updates, or notifications related to specific blockchain activities.
  - name: Debug
    description: |
      Offers a set of debugging utilities.

paths:
  /accounts/{address}:
    get:
      parameters:
        - $ref: '#/components/parameters/GetAddressInPath'
        - $ref: '#/components/parameters/RevisionInQuery'
      tags:
        - Accounts
      summary: Retrieve account details
      description: |
        Retrieve information about an account or a contract identified by its `address`.

        To access historical details, you can specify a `revision` as a query parameter.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid address'

  /accounts/*:
    post:
      parameters:
        - $ref: '#/components/parameters/CallCodeRevisionInQuery'
      tags:
        - Accounts
      summary: Inspect clauses
      description: |
        This endpoint can be used for various purposes:
        
          - Read contract state.
          - Simulate the execution of a transaction. This can be useful to determine if your transaction may revert before submitting it.
          - Inspect the outputs of a transaction before executing it.
          - Estimate the gas consumption of a transaction. <b>Note:</b> The `caller` field should be provided for higher accuracy.
        
        The fields `gasPrice`, `gasPayer`, `provedWork`, `blockRef` and `expiration` are for exposing themselves in EVM. Transaction meta features won't be reflected in the result, for example, no error is returned if the transaction is technically expired. For more information, please refer to the vechain documentation.
        
        It is recommended to set the `revision` query parameter to `next` when estimating gas for a transaction.

        To access historical details, you can specify a `revision` as a query parameter.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteCodesRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteCodesResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid address'

  /accounts/{address}/code:
    parameters:
      - $ref: '#/components/parameters/GetAddressInPath'
      - $ref: '#/components/parameters/RevisionInQuery'
    get:
      tags:
        - Accounts
      summary: Retrieve a contract's bytecode
      description: |
        If the provided address is not a contract, empty bytecode is returned.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountCodeResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid address'

  /accounts/{address}/storage/{key}:
    parameters:
      - $ref: '#/components/parameters/GetStorageAddressInPath'
      - $ref: '#/components/parameters/StorageKeyInPath'
      - $ref: '#/components/parameters/RevisionInQuery'
    get:
      tags:
        - Accounts
      summary: Retrieve the value for a storage position
      description: |
        This endpoint allows you to retrieve the value stored at a specific storage position (`{key}`) of a Vechain smart contract associated with the provided address (`{address}`). The response will contain information about the stored value for the given key.
        
        To access historical details, you can specify a `revision` as a query parameter.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStorageResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid address'

  /transactions/{id}:
    get:
      parameters:
        - $ref: '#/components/parameters/TxIDInPath'
        - $ref: '#/components/parameters/RawTxInQuery'
        - $ref: '#/components/parameters/HeadInQuery'
        - $ref: '#/components/parameters/PendingInQuery'
      tags:
        - Transactions
      summary: Retrieve a transaction by ID
      description: |
        This endpoint allows you to retrieve a transaction identified by its ID. If the `pending` parameter is set to true, the response may include a pending transaction with a null `meta` field. Use this option when you want to retrieve pending transactions, providing flexibility in accessing real-time transaction data.
        
        If no transaction is found, the response will be be a `200` with a `null` body.

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTxResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid transaction ID'

  /transactions/{id}/receipt:
    get:
      parameters:
        - $ref: '#/components/parameters/TxIDInPath'
        - $ref: '#/components/parameters/HeadInQuery'
      tags:
        - Transactions
      summary: Retrieve transaction receipt
      description: |
        This endpoint allows you to retrieve the receipt of a transaction identified by its ID. If the transaction is not found, the response will be `null`.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTxReceiptResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid transaction ID'

  /transactions:
    post:
      tags:
        - Transactions
      summary: Send a transaction
      description: |
        This endpoint allows you to send a transaction to the blockchain. The transaction must be signed and RLP encoded.
        
        ⚠️ <b>Note:</b> The example values provided for this endpoint are optimized for mainnet.  
        
        The below is a TypeScript example of how to sign and RLP encode a transaction using the `thor-devkit` library:
        
        ```typescript
        import { Transaction, secp256k1 } from 'thor-devkit'

        const clauses = [{
            to: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed',
            value: 10000,
            data: '0x'
        }]

        let body: Transaction.Body = {
            chainTag: '0x4a',
            blockRef: '0x0000000000000000',
            expiration: 32,
            clauses: clauses,
            gasPriceCoef: 128,
            gas: Transaction.intrinsicGas(clauses),
            dependsOn: null,
            nonce: 12345678
        }

        const tx = new Transaction(body)
        const signingHash = tx.signingHash()
        tx.signature = secp256k1.sign(signingHash, Buffer.from("99f0500549792796c14fed62011a51081dc5b5e68fe8bd8a13b86be829c4fd36", "hex"))

        const raw = tx.encode()
        const decoded = Transaction.decode(raw)
        
        axios.post('http://localhost:8669/transactions', {
          raw: '0x' + raw.toString('hex')
        })
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawTx'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TXID'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid transaction'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                example: 'Insufficient energy'

  /blocks/{revision}:
    get:
      parameters:
        - $ref: '#/components/parameters/RevisionInPath'
        - $ref: '#/components/parameters/ExpandedInQuery'
        - $ref: '#/components/parameters/RawBlockInQuery'
      tags:
        - Blocks
      summary: Retrieve a block
      description: |
        
        Retrieve information about a block identified by its `revision`.
        
        If the provided `revision` is not found, the response will be `null`
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBlockResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid revision'

  /logs/event:
    post:
      tags:
        - Logs
      summary: Query smart contract events
      description: |
        Query event logs generated by vechain smart contracts. Events are created using the `LOG` opcode in the Ethereum Virtual Machine (EVM).

        Event logs provide a way to track specific occurrences and state changes within a smart contract. By querying these logs, you can gain insights into the history of events emitted by a particular contract.
        
        Limited to a max of 1000 entries per query.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventLogFilterRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventLogsResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid request body'

  /logs/transfer:
    post:
      tags:
        - Logs
      summary: Query VET transfer events
      description: |
        Query VET transfers with a given criteria.
        
        Limited to a max of 1000 entries per query.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferLogFilterRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferLogsResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid request body'

  /node/network/peers:
    get:
      tags:
        - Node
      summary: Retrieve connected peers
      description: |
        Retrieve information about the peers connected to the node.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPeersResponse'

  /subscriptions/block:
    get:
      tags:
        - Subscriptions
      summary: "(Websocket) Blocks"
      description: |
        Establish a websocket connection to the node to receive real-time updates on new blocks. 
        
        This endpoint can also be used to resume a subscription from a specific point in time.
        
        
        Example:
        
        ```javascript 
        const ws = new WebSocket('ws://localhost:8669/subscriptions/block')
        
        ws.onmessage = (event) => {
          console.log(event.data)
        }
        ```
      parameters:
        - $ref: '#/components/parameters/PositionInQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionBlockResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid position'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                example: '"pos" is out of range'

  /subscriptions/event:
    get:
      tags:
        - Subscriptions
      summary: (Websocket) Events
      description: |
        Subscribe to events generated by vechain smart contracts. Events are created using the `LOG` opcode in the Ethereum Virtual Machine (EVM).
        
        Example:
        
        ```javascript
        
        // Filter the events by 'Transfer(address,address,uint256)'
        const ws = new WebSocket('ws://localhost:8669/subscriptions/event?t0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef')
        
        ws.onmessage = (event) => {
          console.log(event.data)
        }
        ```
      parameters:
        - $ref: '#/components/parameters/PositionInQuery'
        - $ref: '#/components/parameters/AddrInQuery'
        - $ref: '#/components/parameters/Topic0InQuery'
        - $ref: '#/components/parameters/Topic1InQuery'
        - $ref: '#/components/parameters/Topic2InQuery'
        - $ref: '#/components/parameters/Topic3InQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionEventResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid position'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                example: '"pos" is out of range'

  /subscriptions/transfer:
    get:
      tags:
        - Subscriptions
      summary: (Websocket) Transfers
      description: |
        Subscribe to VET transfers with a given criteria.
        
        Example:
        
        ```javascript
        const ws = new WebSocket('ws://localhost:8669/subscriptions/transfer?sender=0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa')
        
        ws.onmessage = (event) => {
          console.log(event.data)
        }
        ```
      parameters:
        - $ref: '#/components/parameters/PositionInQuery'
        - $ref: '#/components/parameters/TxOriginInQuery'
        - $ref: '#/components/parameters/TransferRecipientInQuery'
        - $ref: '#/components/parameters/TransferSenderInQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionEventResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid position'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                example: '"pos" is out of range'

  /subscriptions/beat2:
    get:
      tags:
        - Subscriptions
      summary: "(Websocket) Beats"
      description: |
        Establish a websocket connection to receive blockchain beats, which contain a summary of new blocks and bloom filters composited with affected addresses.
        
        Example:
        
        ```javascript
        const ws = new WebSocket('ws://localhost:8669/subscriptions/beat2')
        
        ws.onmessage = (event) => {
          console.log(event.data)
        }
        ```
      parameters:
        - $ref: '#/components/parameters/PositionInQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionBeat2Response'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid position'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                example: '"pos" is out of range'

  /subscriptions/txpool:
    get:
      tags:
        - Subscriptions
      summary: (Websocket) Subscribe to new transactions
      description: |
        Establish a websocket connection to receive real-time updates on transactions that are pending inclusion in a future block.
        
        Example:
        
        ```javascript
        const ws = new WebSocket('ws://localhost:8669/subscriptions/txpool')
        
        ws.onmessage = (event) => {
          console.log(event.data)
        }
        ```
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TXID'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid position'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                example: '"pos" is out of range'

  /subscriptions/beat:
    get:
      deprecated: true
      tags:
        - Subscriptions
      summary: "(Websocket) Subscribe to Blockchain Beats"
      description: |
        Establish a websocket connection to receive blockchain beats, which contain a summary of new blocks and bloom filters composited with affected addresses.
        
        Example:
        
        ```javascript
        const ws = new WebSocket('ws://localhost:8669/subscriptions/beat')
        
        ws.onmessage = (event) => {
          console.log(event.data)
        }
        ```
      parameters:
        - $ref: '#/components/parameters/PositionInQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionBeatResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid position'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
                example: '"pos" is out of range'

  /debug/tracers:
    post:
      tags:
        - Debug
      summary: Trace a transaction clause
      description:
        This endpoint allows you to create a tracer for a specific clause. Tracers are instrumental in monitoring and analyzing the execution flow within the EVM.
        
        You can customize the tracer using various options to tailor it to your specific debugging needs.
        
        ⚠️ <b>Note:</b> The example values provided for this endpoint are optimized for mainnet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDebugTracerRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: |
                  The response will depend on the type of tracer you have created.
                type: object
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid target'

  /debug/tracers/call:
    post:
      tags:
        - Debug
      summary: Trace a call
      description: |
        This endpoint enables clients to create a tracer for a specific vechain clause. 
        
        You can customize the tracer using various options to suit your debugging requirements.

      parameters:
        - $ref: '#/components/parameters/CallCodeRevisionInQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDebugTracerCallRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: |
                  The response will depend on the type of tracer you have created.
                type: object
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid request body'

  /debug/storage-range:
    post:
      tags:
        - Debug
      summary: Retrieve storage range
      description: |
        The endpoint retrieves storage entries related to a particular clause execution and contract address. This 
        could be useful for inspecting or analyzing storage changes.
        
        ⚠️ <b>Note:</b> The example values provided for this endpoint are optimized for mainnet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageRangeOption'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageRange'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid address'

components:
  schemas:
    GetAccountResponse:
      type: object
      title: GetAccountResponse
      properties:
        balance:
          type: string
          description: VET balance in wei, presented as a hexadecimal string.
          example: '0x47ff1f90327aa0f8e'
          nullable: false
        energy:
          type: string
          description: Energy (VTHO) in wei, presented as a hexadecimal string.
          example: '0xcf624158d591398'
          nullable: false
        hasCode:
          type: boolean
          description: Indicates whether the account is a contract (true) or not (false).
          example: false
          nullable: false
      example:
        balance: '0x47ff1f90327aa0f8e'
        energy: '0xcf624158d591398'
        hasCode: false

    ExecuteCodesRequest:
      type: object
      title: ExecuteCodesRequest
      allOf:
        - $ref: '#/components/schemas/ExtendedCallData'
        - $ref: '#/components/schemas/BatchCallData'
      example:
        gas: 50000
        gasPrice: '1000000000000000'
        caller: '0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa'
        provedWork: "1000"
        gasPayer: "0xd3ae78222beadb038203be21ed5ce7c9b1bff602"
        expiration: 1000
        blockRef: "0x00000000851caf3c"
        clauses:
          # Contract Call (VTHO Transfer)
          - to: '0x0000000000000000000000000000456E65726779'
            value: '0x0'
            data: '0xa9059cbb0000000000000000000000000f872421dc479f3c11edd89512731814d0598db50000000000000000000000000000000000000000000000013f306a2409fc0000'
          # VET Transfer
          - to: '0xf077b491b355E64048cE21E3A6Fc4751eEeA77fa'
            value: '0x6124fee993bc00000'
            data: '0x'
          # Contract Deployment
          - to: null
            value: '0x0'
            data: '0x6080604052348015600f57600080fd5b50609f8061001e6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631820cabb146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b62015180815600a165627a7a723058200ac7475da248e2fc26c057319e296e90c24d5f8b9bf956fb3b77545642cad3b10029'

    ExecuteCodesResponse:
      type: array
      title: ExecuteCodesResponse
      items:
        $ref: '#/components/schemas/CallResult'
      example:
        # Contract Call (VTHO Transfer)
        - data: "0x0000000000000000000000000000000000000000000000000000000000000001"
          events:
            - address: "0x0000000000000000000000000000456e65726779"
              topics:
                - "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
                - "0x000000000000000000000000435933c8064b4ae76be665428e0307ef2ccfbd68"
                - "0x0000000000000000000000000f872421dc479f3c11edd89512731814d0598db5"
              data: "0x0000000000000000000000000000000000000000000000013f306a2409fc0000"
          transfers: [ ]
          gasUsed: 13326
          reverted: false
          vmError: ""
        # VET Transfer
        - data: "0x"
          events: [ ]
          transfers:
            - sender: "0x435933c8064b4ae76be665428e0307ef2ccfbd68"
              recipient: "0xf077b491b355e64048ce21e3a6fc4751eeea77fa"
              amount: "0x6124fee993bc00000"
          gasUsed: 0
          reverted: false
          vmError: ""
        # Contract Deployment
        - data: "0x608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631820cabb146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b62015180815600a165627a7a723058200ac7475da248e2fc26c057319e296e90c24d5f8b9bf956fb3b77545642cad3b10029"
          events:
            - address: "0xecadd5492c1fa085e40e2c17e79f1a03f38f86ca"
              topics:
                - "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
              data: "0x000000000000000000000000435933c8064b4ae76be665428e0307ef2ccfbd68"
          transfers: [ ]
          gasUsed: 31881
          reverted: false
          vmError: ""

    GetAccountCodeResponse:
      type: object
      title: GetAccountCodeResponse
      properties:
        code:
          type: string
          description: Contract bytecode, presented as a hexadecimal string.
          example: '0x6060604052600080fd00a165627a7a72305820c23d3ae2dc86ad130561a2829d87c7cb8435365492bd1548eb7e7fc0f3632be90029'
          nullable: false
          pattern: '^0x[0-9a-f]*$'
      example:
        code: '0x6060604052600080fd00a165627a7a72305820c23d3ae2dc86ad130561a2829d87c7cb8435365492bd1548eb7e7fc0f3632be90029'

    GetStorageResponse:
      type: object
      title: GetStorageResponse
      properties:
        value:
          type: string
          description: The value stored at the given storage position.
          example: '0x0000000000000000000000000000000000000000000000000000000000000001'
          nullable: false
          pattern: '^0x[0-9a-f]{64}$'
      example:
        value: '0x0000000000000000000000000000000000000000000000000000000000000001'

    GetTxResponse:
      type: object
      title: GetTxResponse
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/Tx'
            - properties:
                meta:
                  $ref: '#/components/schemas/TxMeta'
          title: GetTxResponse
        - allOf:
            - $ref: '#/components/schemas/RawTx'
            - properties:
                meta:
                  $ref: '#/components/schemas/TxMeta'
          title: GetRawTxResponse
      example:
        id: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
        chainTag: 1
        blockRef: '0x00000001511fc0be'
        expiration: 30
        clauses: [ ]
        gasPriceCoef: 128
        gas: 21000
        origin: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
        delegator: null
        nonce: '0xd92966da424d9939'
        dependsOn: null
        size: 180
        meta:
          blockID: '0x00000001c458949985a6d86b7139690b8811dd3b4647c02d4f41cdefb7d32327'
          blockNumber: 1
          blockTimestamp: 1523156271

    GetTxReceiptResponse:
      type: object
      title: GetTxReceiptResponse
      allOf:
        - $ref: '#/components/schemas/Receipt'
        - properties:
            meta:
              $ref: '#/components/schemas/ReceiptMeta'

    GetBlockResponse:
      type: object
      description: |
        The response will contain information about the block identified by the provided `revision`.
      title: GetBlockResponse
      oneOf:
        - $ref: '#/components/schemas/RegularBlockResponse'
        - $ref: '#/components/schemas/ExpandedBlockResponse'
      example:
        number: 325324
        id: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
        size: 373
        parentID: '0x0004f6cb730dbd90fed09d165bfdf33cc0eed47ec068938f6ee7b7c12a4ea98d'
        timestamp: 1533267900
        gasLimit: 11253579
        beneficiary: '0xb4094c25f86d628fdd571afc4077f0d0196afb48'
        gasUsed: 21000
        totalScore: 1029988
        txsRoot: '0x89dfd9fcd10c9e53d68592cf8b540b280b72d381b868523223992f3e09a806bb'
        txsFeatures: 0
        stateRoot: '0x86bcc6d214bc9d8d0dedba1012a63c8317d19ce97f60c8a2ef5c59bbd40d4261'
        receiptsRoot: '0x15787e2533c470e8a688e6cd17a1ee12d8457778d5f82d2c109e2d6226d8e54e'
        com: true
        signer: '0xab7b27fc9e7d29f9f2e5bd361747a5515d0cc2d1'
        isTrunk: true
        isFinalized: false
        transactions:
          - '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'

    RegularBlockResponse:
      title: RegularBlockResponse
      type: object
      description: |
        The response will contain information about the block identified by the provided `revision`. The `transactions` 
        field contains an array of transaction IDs.
      allOf:
        - $ref: '#/components/schemas/Block'
        - $ref: '#/components/schemas/IsTrunk'
        - $ref: '#/components/schemas/IsFinalized'
        - properties:
            transactions:
              description: An array of transaction IDs
              type: array
              nullable: false
              minItems: 0
              items:
                type: string
                example: '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'

    ExpandedBlockResponse:
      title: ExpandedBlockResponse
      type: object
      description: |
        The response will contain information about the block identified by the provided `revision`. The `transactions` 
        field contains an array of transactions, expanded to include their receipts.
      allOf:
        - $ref: '#/components/schemas/Block'
        - $ref: '#/components/schemas/IsTrunk'
        - $ref: '#/components/schemas/IsFinalized'
        - properties:
            transactions:
              description: All included transactions, expanded, to include their receipts
              type: array
              nullable: false
              minItems: 0
              items:
                allOf:
                  - $ref: '#/components/schemas/Tx'
                  - $ref: '#/components/schemas/Receipt'

    EventLogFilterRequest:
      type: object
      title: EventLogFilterRequest
      properties:
        range:
          $ref: '#/components/schemas/FilterRange'
        options:
          $ref: '#/components/schemas/FilterOptions'
        criteriaSet:
          type: array
          nullable: true
          minItems: 0
          items:
            $ref: '#/components/schemas/EventCriteria'
        order:
          description: |
            Specifies the order of the results. Use `asc` for ascending order, and `desc` for descending order.
            
            Default value: `asc`
          type: string
          nullable: true
          enum:
            - asc
            - desc

    EventLogsResponse:
      type: array
      title: EventLogsResponse
      minItems: 0
      nullable: false
      items:
        allOf:
          - $ref: '#/components/schemas/Event'
          - properties:
              meta:
                $ref: '#/components/schemas/LogMeta'

    TransferLogFilterRequest:
      type: object
      title: TransferLogFilterRequest
      properties:
        range:
          $ref: '#/components/schemas/FilterRange'
        options:
          $ref: '#/components/schemas/FilterOptions'
        criteriaSet:
          type: array
          nullable: true
          minItems: 0
          items:
            $ref: '#/components/schemas/TransferCriteria'
        order:
          description: |
            Specifies the order of the results. Use `asc` for ascending order, and `desc` for descending order.
          type: string
          nullable: true
          enum:
            - asc
            - desc

    TransferLogsResponse:
      type: array
      title: TransferLogsResponse
      minItems: 0
      nullable: false
      items:
        allOf:
          - $ref: '#/components/schemas/Transfer'
          - properties:
              meta:
                $ref: '#/components/schemas/LogMeta'

    GetPeersResponse:
      type: array
      title: GetPeersResponse
      minItems: 0
      nullable: false
      items:
        $ref: '#/components/schemas/PeerStats'

    SubscriptionBlockResponse:
      type: object
      title: SubscriptionBlockResponse
      allOf:
        - $ref: '#/components/schemas/Block'
        - $ref: '#/components/schemas/Obsolete'
        - properties:
            transactions:
              description: "An array of transaction IDs associated with the block."
              type: array
              minItems: 0
              nullable: false
              items:
                type: string
                example:
                  - '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'

    SubscriptionEventResponse:
      type: object
      title: SubscriptionEventResponse
      allOf:
        - $ref: '#/components/schemas/Event'
        - $ref: '#/components/schemas/Obsolete'
        - properties:
            meta:
              $ref: '#/components/schemas/LogMeta'

    SubscriptionTransferResponse:
      type: object
      title: SubscriptionTransferResponse
      allOf:
        - $ref: '#/components/schemas/Transfer'
        - $ref: '#/components/schemas/Obsolete'
        - properties:
            meta:
              $ref: '#/components/schemas/LogMeta'

    SubscriptionBeat2Response:
      type: object
      title: SubscriptionBeat2Response
      allOf:
        - $ref: '#/components/schemas/SubscriptionBeatResponse'
        - properties:
            gasLimit:
              type: integer
              format: uint64
              description: |
                The gas limit of the block
              example: 12000000
              nullable: false

    SubscriptionBeatResponse:
      type: object
      title: SubscriptionBeatResponse
      allOf:
        - $ref: '#/components/schemas/Obsolete'
        - properties:
            number:
              type: integer
              format: uint32
              description: |
                The block number (height)
              example: 325324
              nullable: false
            id:
              type: string
              format: hex
              description: |
                The block identifier
              example: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
              nullable: false
              pattern: '^0x[0-9a-f]{64}$'
            parentID:
              type: string
              format: hex
              description: |
                The parent block identifier
              example: '0x0004f6cb730dbd90fed09d165bfdf33cc0eed47ec068938f6ee7b7c12a4ea98d'
              nullable: false
              pattern: '^0x[0-9a-f]{64}$'
            timestamp:
              type: integer
              format: uint64
              description: |
                The UNIX timestamp of the block
              example: 1533267900
              nullable: false
            txsFeatures:
              type: integer
              format: uint32
              description: |
                The supported transaction features bitset
              example: 0
              nullable: false
            bloom:
              type: string
              format: hex
              description: |
                A hexadecimal representation of the bloom filter composed with affected addresses & topics.

                The bloom filter is used to efficiently check whether an element is a member of a set,
                providing a summary of affected addresses related to new blocks.
              example: '0x0424c1ff47029280'
              nullable: false
              pattern: '^0x[0-9a-f]*$'
            k:
              type: integer
              format: uint32
              description: |
                The number of hash functions for bloom filter
              example: 13
              nullable: false

    PostDebugTracerRequest:
      type: object
      title: PostDebugTracerRequest
      allOf:
        - $ref: '#/components/schemas/TracerOption'
        - $ref: '#/components/schemas/ClauseTracerOption'
      example:
        target: '0x010709463c1f0c9aa66a31182fb36d1977d99bfb6526bae0564a0eac4006c31a/0/0'
        name: "call"
        config: { }

    PostDebugTracerCallRequest:
      title: PostDebugTracerCallRequest
      type: object
      allOf:
        - $ref: '#/components/schemas/TracerOption'
        - $ref: '#/components/schemas/CallData'
        - $ref: '#/components/schemas/ExtendedCallData'
      example:
        value: "0x0"
        to: "0x0000000000000000000000000000456E65726779"
        data: "0xa9059cbb0000000000000000000000000f872421dc479f3c11edd89512731814d0598db50000000000"
        gas: 50000
        gasPrice: "1000000000000000"
        caller: "0x7567d83b7b8d80addcb281a71d54fc7b3364ffed"
        provedWork: "1000"
        gasPayer: "0xd3ae78222beadb038203be21ed5ce7c9b1bff602"
        expiration: 1000
        blockRef: "0x00000000851caf3c"
        name: "call"

    TxMeta:
      title: TxMeta
      type: object
      description: Transaction metadata such as block number, block timestamp, etc.
      properties:
        blockID:
          type: string
          description: The block identifier in which the transaction was included.
          format: hex
          example: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
          nullable: false
          pattern: '^0x[0-9a-f]{64}$'
        blockNumber:
          type: integer
          format: uint32
          description: The block number (height) of the block in which the transaction was included.
          example: 325324
          nullable: false
        blockTimestamp:
          type: integer
          format: uint64
          description: The UNIX timestamp of the block in which the transaction was included.
          example: 1533267900
          nullable: false
      example:
        blockID: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
        blockNumber: 325324
        blockTimestamp: 1533267900

    ReceiptMeta:
      title: ReceiptMeta
      type: object
      description: The transaction receipt metadata such as block number, block timestamp, etc.
      properties:
        blockID:
          type: string
          description: The block identifier in which the transaction was included.
          pattern: '^0x[0-9a-f]{64}$'
          example: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
          nullable: false
        blockNumber:
          type: integer
          format: uint32
          description: The block number (height) of the block in which the transaction was included.
          example: 325324
          nullable: false
        blockTimestamp:
          type: integer
          format: uint64
          description: The UNIX timestamp of the block in which the transaction was included.
          example: 1533267900
          nullable: false
        txID:
          type: string
          format: hex
          description: The transaction identifier.
          pattern: '^0x[0-9a-f]{64}$'
          example: '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'
          nullable: false
        txOrigin:
          type: string
          description: |
            The account from which the transaction was sent.
          example: '0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d'
          nullable: false
          pattern: '^0x[0-9a-f]{40}$'
      example:
        blockID: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
        blockNumber: 325324
        blockTimestamp: 1533267900
        txID: '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'
        txOrigin: '0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d'

    LogMeta:
      title: LogMeta
      type: object
      description: The event or transfer log metadata such as block number, block timestamp, etc.
      properties:
        blockID:
          type: string
          format: hex
          description: The block identifier in which the log was included.
          example: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
          nullable: false
          pattern: '^0x[0-9a-f]{64}$'
        blockNumber:
          type: integer
          format: uint32
          description: The block number (height) of the block in which the log was included.
          example: 325324
          nullable: false
        blockTimestamp:
          type: integer
          format: uint64
          description: The UNIX timestamp of the block in which the log was included.
          example: 1533267900
          nullable: false
        txID:
          type: string
          format: hex
          description: The transaction identifier, from which the log was generated.
          example: '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'
          nullable: false
          pattern: '^0x[0-9a-f]{64}$'
        txOrigin:
          type: string
          description: The account from which the transaction was sent.
          example: '0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d'
          nullable: false
          pattern: '^0x[0-9a-f]{40}$'
        clauseIndex:
          type: integer
          format: uint32
          description: The index of the clause in the transaction, from which the log was generated.
          example: 0
          nullable: false
        txIndex:
          description: The index of the transaction in the block, from which the log was generated.
          type: integer
          nullable: true
          example: 1
        logIndex:
          description: The index of the log in the receipt's outputs. This is an overall index among all clauses.
          type: integer
          nullable: true
          example: 1

    Block:
      title: Block
      type: object
      properties:
        number:
          type: integer
          format: uint32
          description: The block number (height).
          example: 325324
          nullable: false
        id:
          type: string
          format: hex
          description: The block identifier.
          example: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
          nullable: false
          pattern: '^0x[0-9a-f]{64}$'
        size:
          type: integer
          format: uint32
          description: The RLP encoded block size in bytes
          example: 373
          nullable: false
        parentID:
          type: string
          format: hex
          description: The parent block identifier.
          nullable: false
          pattern: '^0x[0-9a-f]{64}$'
          example: '0x0004f6cb730dbd90fed09d165bfdf33cc0eed47ec068938f6ee7b7c12a4ea98d'
        timestamp:
          type: integer
          format: uint64
          description: The UNIX timestamp of the block.
          example: 1533267900
          nullable: false
        gasLimit:
          type: integer
          format: uint64
          description: The maximum amount of gas that all transactions inside the block are allowed to consume
          example: 11253579
          nullable: false
        beneficiary:
          type: string
          format: hex
          description: The address assigned by the block proposer to receive the reward (in VTHO)
          example: '0xb4094c25f86d628fdd571afc4077f0d0196afb48'
          nullable: false
          pattern: '^0x[0-9a-f]{40}$'
        gasUsed:
          type: integer
          format: uint64
          description: The actual amount of gas used within the block
          example: 21000
          nullable: false
        totalScore:
          type: integer
          format: uint64
          description: The accumulated witness number of the chain branch headed by the block
          example: 1029988
          nullable: false
        txsRoot:
          type: string
          format: hex
          description: The root hash of transactions in the block
          example: '0x89dfd9fcd10c9e53d68592cf8b540b280b72d381b868523223992f3e09a806bb'
          nullable: false
          pattern: '^0x[0-9a-f]{64}$'
        txsFeatures:
          type: integer
          format: uint32
          description: The supported transaction features bitset
          example: 0
          nullable: false
        stateRoot:
          type: string
          format: hex
          description: The root hash for the global state after applying changes in this block
          example: '0x86bcc6d214bc9d8d0dedba1012a63c8317d19ce97f60c8a2ef5c59bbd40d4261'
          nullable: false
          pattern: '^0x[0-9a-f]{64}$'
        receiptsRoot:
          type: string
          format: hex
          description: The hash of the transaction receipts trie
          example: '0x15787e2533c470e8a688e6cd17a1ee12d8457778d5f82d2c109e2d6226d8e54e'
          nullable: false
          pattern: '^0x[0-9a-f]{64}$'
        com:
          type: boolean
          description: Whether the block signer voted COM(Commit) in BFT
          example: true
          nullable: false
        signer:
          type: string
          format: hex
          description: The address of the block signer
          example: '0xab7b27fc9e7d29f9f2e5bd361747a5515d0cc2d1'
          nullable: false
          pattern: '^0x[0-9a-f]{40}$'

    Clause:
      title: Clause
      type: object
      properties:
        to:
          type: string
          description: |
            The recipient of the clause. Null indicates contract deployment.
          example: '0x0000000000000000000000000000456e65726779'
          nullable: true
          pattern: '^0x[0-9a-f]{40}$'
        value:
          type: string
          description: |
            The hexadecimal representation of the amount (wei) of VET to be transferred.
          example: '0x47ff1f90327aa0f8e'
          nullable: false
          pattern: '^0x[0-9a-f]*$'
        data:
          type: string
          description: |
            The input data for the clause (in bytes).
          example: '0xa9059cbb0000000000000000000000000f872421dc479f3c11edd89512731814d0598db5000000000000'
          nullable: false
          pattern: '^0x[0-9a-f]*$'

    Tx:
      title: Tx
      type: object
      properties:
        id:
          type: string
          description: The transaction identifier.
          example: '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'
          pattern: '^0x[0-9a-f]{64}$'
          nullable: false
        origin:
          type: string
          description: The address of the origin account.
          pattern: '^0x[0-9a-f]{40}$'
          example: '0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d'
          nullable: false
        delegator:
          type: string
          pattern: '^0x[0-9a-f]{40}$'
          description: The address of the sponsor / delegator account.
          example: null
          nullable: true
        size:
          type: integer
          format: uint32
          description: Byte size of the transaction that is RLP encoded.
          example: 130
          nullable: false
        chainTag:
          type: integer
          format: uint8
          description: The last byte of the genesis block ID.
          example: 39
          nullable: false
        blockRef:
          type: string
          description: The first 8 bytes of a referenced block ID.
          example: '0x0004f6cb730dbd90'
          nullable: false
          pattern: '^0x[0-9a-f]{16}$'
        expiration:
          type: integer
          format: uint32
          description: The expiration of the transaction, represented as the number of blocks after the `blockRef`
          example: 720
          nullable: false
        clauses:
          type: array
          minItems: 0
          description: |
            An array of clauses that are executed by the transaction.
          items:
            $ref: '#/components/schemas/Clause'
        gasPriceCoef:
          type: integer
          format: uint8
          description: The coefficient used to calculate the final gas price of the transaction.
          example: 0
          nullable: false
        gas:
          type: integer
          format: uint64
          description: The max amount of gas that can be used by the transaction.
          example: 21000
          nullable: false
        dependsOn:
          type: string
          format: hex
          description: The transaction ID that this transaction depends on.
          pattern: '^0x[0-9a-f]{64}$'
          example: null
          nullable: true
        nonce:
          type: string
          example: '0x29c257e36ea6e72a'
          description: |
            The transaction `nonce` is a 64-bit unsigned integer that is determined by the transaction sender.
          nullable: false

    RawTx:
      title: RawTx
      type: object
      properties:
        raw:
          type: string
          format: hex
          description: The raw RLP encoded transaction.
          nullable: false
          pattern: '^0x[0-9a-f]*$'
          example: '0xf901854a880104c9cf34b0f5701ef8e7f8e594058d4c951aa24ca012cef3408b259ac1c69d1258890254beb02d1dcc0000b8c469ff936b00000000000000000000000000000000000000000000000000000000ee6c7f95000000000000000000000000167f6cc1e67a615b51b5a2deaba6b9feca7069df000000000000000000000000000000000000000000000000000000000000136a00000000000000000000000000000000000000000000000254beb02d1dcc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080830469978084cb6b32c5c101b88272da83429a49a354f566dd8c85ba288a7c86d1d3161c0aad6a276a7c9f8e69c14df3d76f0d3442a4f4a2a13d016c32c45e82d5010f27386eeb384dee3d8390c0006adead8b8ce8823c583e1ac15facef8f1cc665a707ade82b3c956a53a2b24e0c03d80504bc4b276b5d067b72636d8e88d2ffc65528f868df2cadc716962978a000'

    Event:
      title: Event
      type: object
      properties:
        address:
          type: string
          description: |
            The address of the contract that produces the event (bytes20).
          example: '0x0000000000000000000000000000456e65726779'
          nullable: false
          pattern: '^0x[0-9a-f]{40}$'
        topics:
          type: array
          minItems: 0
          nullable: false
          description: |
            Topics are indexed parameters to an event. The first topic is always the event signature.
          items:
            type: string
            pattern: '^0x[0-9a-f]{64}$'
            description: |
          example:
            - '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
            - '0x000000000000000000000000435933c8064b4ae76be665428e0307ef2ccfbd68'
        data:
          type: string
          description: |
            The data associated with the event.
          example: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
          nullable: false
          pattern: '^0x[0-9a-f]*$'

    Transfer:
      title: Transfer
      type: object
      properties:
        sender:
          type: string
          description: |
            The address that sent the VET.
          example: '0x5034aa590125b64023a0262112b98d72e3c8e40e'
          nullable: false
          pattern: '^0x[0-9a-f]{40}$'
        recipient:
          type: string
          description: |
            The address that received the VET.
          example: '0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa'
          nullable: false
          pattern: '^0x[0-9a-f]{40}$'
        amount:
          type: string
          description: |
            The amount of VET transferred.
          example: '0x47fdb3c3f456c0000'
          nullable: false
          pattern: '^0x[0-9a-f]*$'

    Receipt:
      title: Receipt
      type: object
      properties:
        gasUsed:
          type: integer
          format: uint64
          description: |
            The amount of gas used by the transaction.
          example: 21000
          nullable: false
        gasPayer:
          type: string
          description: |
            The address of the account that paid the gas fee.
          example: '0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d'
          nullable: false
          pattern: '^0x[0-9a-f]{40}$'
        paid:
          type: string
          description: The amount of energy (VTHO) in wei, used to pay for the gas.
          example: '0x1236efcbcbb340000'
          nullable: false
          pattern: '^0x[0-9a-f]*$'
        reward:
          type: string
          description: The amount of energy (VTHO) in wei, paid to the block signer as a reward.
          example: '0x576e189f04f60000'
          nullable: false
          pattern: '^0x[0-9a-f]*$'
        reverted:
          type: boolean
          description: |
            Indicates whether the transaction was reverted (true means reverted).
          example: false
          nullable: false
        outputs:
          type: array
          minItems: 0
          description: |
            An array of outputs produced by the transaction.
          items:
            properties:
              contractAddress:
                type: string
                description: |
                  The address of the deployed contract, if the corresponding clause is a
                  contract deployment clause.
                example: '0x0000000000000000000000000000456e65726779'
                nullable: false
                pattern: '^0x[0-9a-f]{40}$'
              events:
                type: array
                minItems: 0
                nullable: false
                items:
                  $ref: '#/components/schemas/Event'
              transfers:
                type: array
                minItems: 0
                nullable: false
                items:
                  $ref: '#/components/schemas/Transfer'

    CallData:
      type: object
      title: CallData
      properties:
        value:
          type: string
          description: |
            The amount of token to be transferred.
          example: '0x47ff1f90327aa0f8e'
          nullable: false
        data:
          type: string
          description: |
            The input data for the contract call.
          example: '0xa9059cbb0000000000000000000000000f872421dc479f3c11edd89512731814d0598db5000000000000'
          nullable: false
        to:
          type: string
          description: |
            The recipient of the call. Null indicates contract deployment.
          example: '0x0000000000000000000000000000456e65726779'
          nullable: true
          pattern: '^0x[0-9a-f]{40}$'
        gas:
          type: integer
          format: uint64
          description: |
            The maximum allowed gas for execution.
          example: 21000
          nullable: true
        gasPrice:
          type: string
          description: |
            The absolute gas price.
          example: '1000000000000000'
          nullable: true
        caller:
          type: string
          description: |
            The caller's address (msg.sender).
          example: '0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa'
          nullable: true
          pattern: '^0x[0-9a-f]{40}$'

    ExtendedCallData:
      type: object
      title: ExtendedCallData
      properties:
        provedWork:
          type: string
          description: |
            The transaction's proved work (for extension contract).
          example: "1000"
          nullable: true
        gasPayer:
          type: string
          description: |
            The address of the gas payer (for extension contract).
          example: "0xd3ae78222beadb038203be21ed5ce7c9b1bff602"
          nullable: true
        expiration:
          type: integer
          format: uint32
          description: |
            The transaction expiration (for extension contract).
          example: 1000
          nullable: true
        blockRef:
          type: string
          description: |
            The block reference (for extension contract).
          example: "0x00000000851caf3c"
          nullable: true

    CallResult:
      type: object
      title: CallResult
      properties:
        data:
          type: string
          description: |
            The output data produced by the contract execution.
          example: '0x0000000000000000000000000000000000000000000000000000000000000001'
          nullable: false
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
          description: |
            An array of events generated during contract execution.
          nullable: false
          minItems: 0
        transfers:
          type: array
          items:
            $ref: '#/components/schemas/Transfer'
          description: |
            An array of transfers that occurred during contract execution.
          nullable: false
          minItems: 0
        gasUsed:
          type: integer
          format: uint64
          description: |
            The amount of gas used during execution.
          example: 21000
          nullable: false
        reverted:
          type: boolean
          description: |
            Indicates whether the transaction was reverted (true means reverted).
          example: false
          nullable: false
        vmError:
          type: string
          description: |
            The virtual machine error message if the execution encountered an error.
          example: 'insufficient balance for transfer'
          nullable: false

    BatchCallData:
      type: object
      title: BatchCallData
      properties:
        clauses:
          type: array
          items:
            $ref: '#/components/schemas/Clause'
          description: |
            An array of clauses to be executed.
          nullable: true
        gas:
          type: integer
          format: uint64
          description: |
            The maximum allowed gas for the execution of the batch call.
          example: 50000
          nullable: true
        gasPrice:
          type: string
          description: |
            The absolute gas price for the batch call.
          example: 1000000000000000
          nullable: true
        caller:
          type: string
          description: |
            The caller's address (msg.sender) for the batch call.
          example: '0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa'
          nullable: true
      example:
        clauses:
          - to: '0x5034aa590125b64023a0262112b98d72e3c8e40e'
            value: '0xde0b6b3a7640000'
            data: '0x5665436861696e2054686f72'
        gas: 50000
        gasPrice: '1000000000000000'
        caller: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'

    BatchCallResult:
      title: BatchCallResult
      type: array
      minItems: 0
      nullable: false
      items:
        $ref: '#/components/schemas/CallResult'

    FilterOptions:
      nullable: true
      type: object
      title: FilterOptions
      properties:
        offset:
          type: integer
          example: 0
          nullable: true
          description: |
            The offset in the matched record set. Use this parameter for pagination.
            
            Default's to 0.

        limit:
          type: integer
          example: 100
          nullable: true
          description: |
            The limit of records to be included in the output. Use this parameter for pagination.
            
            Default's to all results.
        includeIndexes:
          type: boolean
          example: true
          nullable: true
          description: Include both transaction and log index in the response.
      description: |
        Include these parameters to receive filtered results in a paged format. 
        
        <b>Note: </b> If omitted, a timeout may occur if there is a large amount of data to query. If there is a small amount of data you can omit to receive all results in a single response.
        
        Example:
        ```json
        {
          "options": {
            "offset": 0,
            "limit": 10,
            "includeIndexes": true
          }
        }
        ```
        In this example, the page offset is 0, and the page size is 10.

    FilterRange:
      nullable: true
      type: object
      title: FilterRange
      properties:
        unit:
          type: string
          enum:
            - block
            - time
          example: block
          nullable: true
          description: |
            Specifies the unit of measurement for the `from` and `to` values. 
            Use `block` for block numbers or `time` for block timestamps. Default is `block`.
        from:
          type: integer
          format: uint64
          description: |
            Defines the starting block number or timestamp for the specified range.
          example: 17240365
          nullable: true
        to:
          type: integer
          format: uint64
          example: 17289864
          nullable: true
          description: |
            Specifies the ending block number or timestamp for the specified range.
      description: |
        Defines the range for filtering. Setting values to null indicates the entire range.
        
        <b>Note: </b> If omitted or set to null, a timeout may occur if there is a large amount of data to query.

        Example:
        ```json
        {
          "range": {
            "unit": "block",
            "from": 10,
            "to": 1000
          }
        }
        ```
        This refers to the range from block 10 to block 1000.
        
    EventOptionalData:
      nullable: true
      type: object
      title: EventOptionalData
      properties:
        txIndex:
          type: boolean
          example: true
          nullable: true
          description: |
            Specifies whether to include in the response the event transaction index.
        loglIndex:
          type: boolean
          example: true
          nullable: true
          description: |
            Specifies whether to include in the response the event log index.
      description: |
        Specifies all the optional data that can be included in the response.

    EventCriteria:
      type: object
      title: EventCriteria
      properties:
        address:
          type: string
          example: '0x0000000000000000000000000000456E65726779'
          nullable: true
          pattern: '^0x[0-9a-fA-F]{40}$'
          description: |
            The address of the contract that emits the event.
        topic0:
          type: string
          example: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
          nullable: true
          pattern: '^0x[0-9a-fA-F]{64}$'
          description: |
            The keccak256 hash representing the event signature. 
            For example, the signature for the `Transfer` event is `keccak256("Transfer(address,address,uint256)")`.
        topic1:
          type: string
          example: '0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa'
          nullable: true
          pattern: '^0x[0-9a-fA-F]{64}$'
          description: |
            Filters events based on the 1st parameter in the event. 
            
            <b>Note</b>: The parameter must be padded to 32 bytes.
            
            For example, for the event `MySolidityEvent(address,uint256)`, use `topic1` to match the `address` parameter.
        topic2:
          type: string
          example: '0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa'
          nullable: true
          pattern: '^0x[0-9a-fA-F]{64}$'
          description: |
            Filters events based on the 2nd parameter in the event. 
            
            <b>Note</b>: The parameter must be padded to 32 bytes.
            
            For example, for the event `MySolidityEvent(address,uint256)`, use `topic2` to match the `uint256` parameter.
        topic3:
          type: string
          example: '0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa'
          nullable: true
          pattern: '^0x[0-9a-fA-F]{64}$'
          description: |
            Filters events based on the 3rd parameter in the event. 
            
            <b>Note</b>: The parameter must be padded to 32 bytes.
            
            For example, for the event `MySolidityEvent(address,address,uint256)`, use `topic3` to match the `uint256` parameter.
        topic4:
          type: string
          example: '0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa'
          nullable: true
          pattern: '^0x[0-9a-fA-F]{64}$'
          description: |
            Filters events based on the 4th parameter in the event. 
            
            <b>Note</b>: The parameter must be padded to 32 bytes.
            
            For example, for the event `MySolidityEvent(address,address,address,uint256)`, use `topic4` to match the `uint256` parameter.
      description: |
        Criteria to filter events. All fields are joined with the `AND` operator. 
        `null` fields are ignored. 
        
        Example:
        ```json
        {
          "address": "0x0000000000000000000000000000456E65726779",
          "topic0": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        }
        ```
        
        This matches events emitted by `0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa` with `topic0` equal to `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.
      example:
        address: "0x0000000000000000000000000000456E65726779"
        topic0: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
        topic1: '0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa'

    TransferCriteria:
      type: object
      title: TransferCriteria
      properties:
        txOrigin:
          description: |
            The address from which the transaction was sent.
          type: string
          example: '0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa'
          nullable: true
          pattern: '^0x[0-9a-fA-F]{40}$'
        sender:
          description: |
            The address that sent the VET. In most cases this is the same as `txOrigin`, but it may be different if the VET was sent by a contract.
          type: string
          example: '0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa'
          nullable: true
          pattern: '^0x[0-9a-fA-F]{40}$'
        recipient:
          description: |
            The address that received the VET.
          type: string
          example: '0x45429a2255e7248e57fce99e7239aed3f84b7a53'
          nullable: true
          pattern: '^0x[0-9a-fA-F]{40}$'

    PeerStats:
      type: object
      title: PeerStats
      properties:
        name:
          type: string
          description: The identifier and version of the connected peer's software.
          example: 'thor/v1.0.0-6680b98-dev/linux/go1.10.3'
          nullable: false
        bestBlockID:
          type: string
          description: The identifier of the best block known to the connected peer.
          example: '0x000087b3a4d4cdf1cc52d56b9704f4c18f020e1b48dbbf4a23d1ee4f1fa5ff94'
          nullable: false
        totalScore:
          type: integer
          description: The total score of the connected peer.
          example: 68497
          nullable: false
        peerID:
          type: string
          description: The unique identifier of the connected peer on the network.
          example: '50e122a505ee55b84331068acfd857e37ad58f463a0fab9aaff2c1e4b2e2d22ae71dc14fdaf6eead74bd3f60594644aa35c588f9ca6be3341e2ce18ddc413321'
          nullable: false
        netAddr:
          type: string
          description: The network address (IP:Port) of the connected peer.
          example: '128.1.39.120:11235'
          nullable: false
          pattern: '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}:[0-9]{1,5}$'
        inbound:
          type: boolean
          description: Indicates whether the connection is inbound (true) or outbound (false).
          example: false
          nullable: false
        duration:
          type: integer
          description: The duration of the connection with the peer.
          example: 28
          nullable: false

    TXID:
      title: TXID
      type: object
      properties:
        id:
          type: string
          description: |
            The transaction identifier.
                example:
          example: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
          pattern: '^0x[0-9a-f]{64}$'
          nullable: false
      example:
        id: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'

    Obsolete:
      title: Obsolete
      type: object
      properties:
        obsolete:
          type: boolean
          description: |
            Indicates whether the block containing this data has become obsolete (true) or not (false).
          example: false
          nullable: false
      example:
        obsolete: false

    ClauseTracerOption:
      title: ClauseTracerOption
      type: object
      properties:
        target:
          type: string
          description: |
            The unified path of the target to be traced. Currently, only the clause is supported. 
            
            Format:
            `blockID/(txIndex|txId)/clauseIndex` or `txID/clauseIndex`


          example: '0x010709463c1f0c9aa66a31182fb36d1977d99bfb6526bae0564a0eac4006c31a/0/0'
          nullable: false
          pattern: '^0x[0-9a-fA-F]{64}(\/(0x[0-9a-fA-F]{64}|\d+))?\/[0-9]+$'
      example:
        target: '0x010709463c1f0c9aa66a31182fb36d1977d99bfb6526bae0564a0eac4006c31a/0/0'

    TracerOption:
      title: TracerOption
      type: object
      properties:
        name:
          type: string
          enum:
            - structLogger
            - 4byte
            - call
            - noop
            - prestate
            - unigram
            - bigram
            - trigram
            - evmdis
            - opcount
          description: |
            The name of the tracer. An empty name stands for the default struct logger tracer.
          example: "prestate"
          nullable: true
        config:
          type: object
          description: |
            The configuration of the tracer. It is specific to the `name`
          example: { }
          nullable: true
      example:
        name: "prestate"
        config: { }

    StorageRangeOption:
      type: object
      title: StorageRangeOption
      properties:
        address:
          type: string
          description: |
            The address of the contract/ account to be traced.
          example: '0xd8ccdd85abdbf68dfec95f06c973e87b1b5a9997'
          nullable: false
          pattern: '^0x[0-9a-fA-F]{40}$'
        keyStart:
          type: string
          description: |
            The start key of the storage range. Default is `0x0000000000000000000000000000000000000000000000000000000000000000`
          example: '0x0000000000000000000000000000000000000000000000000000000000000000'
          nullable: true
          pattern: '^0x[0-9a-fA-F]{64}$'
        maxResult:
          type: number
          description: |
            The maximum number of results to be returned. Default is 1000.
          example: 10
          nullable: true
        target:
          type: string
          example: '0x010709463c1f0c9aa66a31182fb36d1977d99bfb6526bae0564a0eac4006c31a/0/0'
          description: |
            The unified path of the transaction clause.
            
            Format:
            `blockID/(txIndex|txId)/clauseIndex` or `txID/clauseIndex`
          nullable: false
          pattern: '^0x[0-9a-fA-F]{64}(\/(0x[0-9a-fA-F]{64}|\d+))?\/[0-9]+$'

    StorageRange:
      type: object
      title: StorageRange
      properties:
        nextKey:
          type: string
          example:
            null
          nullable: true
        storage:
          type: object
          nullable: false
          description: |
            The data is non-nullable, but an empty object is returned if no data is found.
          example:
            '0x33e423980c9b37d048bd5fadbd4a2aeb95146922045405accc2f468d0ef96988':
              key:
                '0x0000000000000000000000000000000000000000000000000000000000000001'
              value:
                '0x00000000000000000000000000000000000000000000000000000000000000c8'

    IsTrunk:
      title: IsTrunk
      type: object
      properties:
        isTrunk:
          type: boolean
          description: Whether the block is trunk (true) or not (false)
          example: true
          nullable: false

    IsFinalized:
      title: IsFinalized
      type: object
      properties:
        isFinalized:
          type: boolean
          description: Whether the block has been finalized (true) or not (false)
          example: false
          nullable: false

  parameters:
    GetAddressInPath:
      name: address
      in: path
      description: The address of the account/ contract
      required: true
      schema:
        type: string
        format: hex
        pattern: '^(0x)?[0-9a-fA-F]{40}$'
      example: '0x0000000000000000000000000000456E65726779'

    GetStorageAddressInPath:
      name: address
      in: path
      description: The address of the account/ contract
      required: true
      schema:
        type: string
        format: hex
        pattern: '^(0x)?[0-9a-fA-F]{40}$'
      example: '0x93Ae8aab337E58A6978E166f8132F59652cA6C56'

    RawTxInQuery:
      name: raw
      in: query
      description: Whether the response should include a raw transaction represented in hexadecimal format.
      required: false
      schema:
        type: boolean
      example: false

    RevisionInQuery:
      name: revision
      in: query
      description: Specify either `best`, `justified`, `finalized`, a block number or block ID. If omitted, the `best` block is assumed.
      schema:
        type: string

    CallCodeRevisionInQuery:
      name: revision
      in: query
      description: |
        Specify either `best`, `next`, `justified`, `finalized`, a block number or block ID. If omitted, the `best` block is assumed.
        
        If the `next` block is specified, the call code will be executed on the next block, with the following:
        - The block number is the `best` block number plus one.
        - The timestamp is the `best` block timestamp plus the block interval.
        - Total score, gas limit and beneficiary are the same as the `best` block.
        - The signer will be the zero address
      schema:
        type: string

    RevisionInPath:
      name: revision
      in: path
      description: |

        Revision can be one of:
        - a block ID (hex string)
        - a block number (integer)
        - `best` stands for latest block
        - `justified` stands for the justified block
        - `finalized` stands for the finalized block
      required: true
      schema:
        type: string
      example: best

    HeadInQuery:
      name: head
      in: query
      description: Explicitly define the ID of the head block. Best block is assumed if omitted.
      schema:
        type: string

    StorageKeyInPath:
      in: path
      description: |
        The unique identifier (key) representing the specific position in the account storage.
        This key is used to access and retrieve data stored at a particular storage position.
      required: true
      name: key
      schema:
        type: string
        pattern: '^(0x)?[0-9a-fA-F]{64}$'
      example: '0x0000000000000000000000000000000000000000000000000000000000000001'

    FilterOrderInQuery:
      name: order
      in: query
      description: |
        The order of the results. Use `asc` for ascending order, and `desc` for descending order.
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
      example: asc

    TxIDInPath:
      in: path
      description: The transaction ID
      required: true
      name: id
      schema:
        type: string
      example: '0xb6b5b47a5eee8b14e5222ac1bb957c0bbdc3d489850b033e3e544d9ca0cef934'

    PositionInQuery:
      name: pos
      in: query
      description: |
        A saved block ID for resuming the subscription. If omitted, the best block ID is assumed.
        
        **Note**: If the provided position is too far behind the best block, a 403 error will be thrown. The allowable difference depends on the configuration of each node.
        
        See the argument `api-backtrace-limit` when starting a node.
      schema:
        pattern: '^(0x)?[0-9a-fA-F]{64}$'
        type: string

    ExpandedInQuery:
      name: expanded
      in: query
      required: false
      description: |
        Whether the returned block is expanded. 
        - `true` returns `transactions` as an array of objects with the transaction details and outputs
        - `false` returns `transactions` as an array of transaction IDs (hex strings)
      schema:
        type: boolean
      example: false

    RawBlockInQuery:
      name: raw
      in: query
      required: false
      description: |
        Whether the block should be returned in RLP encoding or not. 
        - `true` returns `block` as an RLP encoded object
        - `false` returns `block` as a structured JSON object
      schema:
        type: boolean
      example: false

    PendingInQuery:
      name: pending
      in: query
      required: false
      description: |
        Allows you to indicate whether the response should include transactions that are still pending
      schema:
        type: boolean
      example: false

    AddrInQuery:
      name: addr
      in: query
      schema:
        type: string
      description: |
        The address of the contract that emits the event.
      example: '0x0000000000000000000000000000456E65726779'

    Topic0InQuery:
      name: t0
      in: query
      schema:
        type: string
      example: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
      description: |
        The keccak256 hash representing the event signature. 
        For example, the signature for the `Transfer` event is `keccak256("Transfer(address,address,uint256)")`.


    Topic1InQuery:
      name: t1
      in: query
      schema:
        type: string
      example: '0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa'
      description: |
        Filters events based on the 1st parameter in the event. 

        <b>Note</b>: The parameter must be padded to 32 bytes.

        For example, for the event `MySolidityEvent(address,uint256)`, use `t1` to match the `address` parameter.

    Topic2InQuery:
      name: t2
      in: query
      schema:
        type: string
      example: '0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa'
      description: |
        Filters events based on the 2nd parameter in the event. 

        <b>Note</b>: The parameter must be padded to 32 bytes.

        For example, for the event `MySolidityEvent(address,uint256)`, use `t2` to match the `uint256` parameter.


    Topic3InQuery:
      name: t3
      in: query
      schema:
        type: string
      example: '0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa'
      description: |
        Filters events based on the 3rd parameter in the event. 

        <b>Note</b>: The parameter must be padded to 32 bytes.

        For example, for the event `MySolidityEvent(address,address,uint256)`, use `t3` to match the `uint256` parameter.


    Topic4InQuery:
      name: t4
      in: query
      schema:
        type: string
      example: '0x0000000000000000000000006d95e6dca01d109882fe1726a2fb9865fa41e7aa'
      description: |
        Filters events based on the 4th parameter in the event. 

        <b>Note</b>: The parameter must be padded to 32 bytes.

        For example, for the event `MySolidityEvent(address,address,address,uint256)`, use `t4` to match the `uint256` parameter.


    TxOriginInQuery:
      name: txOrigin
      in: query
      schema:
        type: string
      description: |
        The address from which the transaction was sent.
      example: '0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa'

    TransferSenderInQuery:
      name: sender
      in: query
      schema:
        type: string
      description: |
        The address that sent the VET. In most cases this is the same as `txOrigin`, but it may be different if the VET was sent by a contract.
      example: '0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa'

    TransferRecipientInQuery:
      name: recipient
      in: query
      schema:
        type: string
      description: |
        The address that received the VET.
      example: '0x45429a2255e7248e57fce99e7239aed3f84b7a53'
