// Copyright (c) 2023 The VeChainThor developers

// Distributed under the GNU Lesser General Public License v3.0 software license, see the accompanying
// file LICENSE or <https://www.gnu.org/licenses/lgpl-3.0.html>

package tx

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/vechain/thor/v2/thor"
)

func TestRootHash(t *testing.T) {
	// Test empty transactions slice
	test := []struct {
		name           string
		txs            Transactions
		expectedResult thor.Bytes32
	}{
		{
			name:           "empty transactions slice",
			txs:            Transactions{},
			expectedResult: thor.Bytes32{0x45, 0xb0, 0xcf, 0xc2, 0x20, 0xce, 0xec, 0x5b, 0x7c, 0x1c, 0x62, 0xc4, 0xd4, 0x19, 0x3d, 0x38, 0xe4, 0xeb, 0xa4, 0x8e, 0x88, 0x15, 0x72, 0x9c, 0xe7, 0x5f, 0x9c, 0xa, 0xb0, 0xe4, 0xc1, 0xc0},
		},
		{
			name:           "non-empty legacy transactions slice",
			txs:            Transactions{GetMockTx(TypeLegacy), GetMockTx(TypeLegacy)},
			expectedResult: thor.Bytes32{0x30, 0x9a, 0xd5, 0x4b, 0x28, 0x76, 0x65, 0x52, 0x66, 0x89, 0x7b, 0x19, 0x22, 0x24, 0x63, 0xd8, 0x27, 0xc8, 0x2a, 0xd6, 0x20, 0x17, 0x7a, 0xcf, 0x9a, 0xfa, 0xc, 0xce, 0xff, 0x12, 0x24, 0x48},
		},
		{
			name:           "non-empty dyn fee transactions slice",
			txs:            Transactions{GetMockTx(TypeDynamicFee), GetMockTx(TypeDynamicFee)},
			expectedResult: thor.Bytes32{0xae, 0xc9, 0xdd, 0xd7, 0x94, 0x12, 0x35, 0xa2, 0xf4, 0x18, 0x8e, 0x18, 0xd8, 0x16, 0xfa, 0x1d, 0x29, 0x36, 0x1d, 0xf5, 0xd6, 0xd4, 0x8e, 0x49, 0xe9, 0x6a, 0x4c, 0x47, 0xef, 0xf9, 0x26, 0x52},
		},
		{
			name:           "non-empty mixed transactions slice",
			txs:            Transactions{GetMockTx(TypeLegacy), GetMockTx(TypeDynamicFee), GetMockTx(TypeDynamicFee), GetMockTx(TypeLegacy)},
			expectedResult: thor.Bytes32{0x8f, 0xaf, 0xc4, 0x4f, 0xf1, 0x85, 0xbe, 0x18, 0xf0, 0xb9, 0x57, 0x51, 0x45, 0x3d, 0x86, 0xad, 0x9e, 0x8, 0x63, 0xf3, 0xe2, 0x76, 0x66, 0x96, 0xb2, 0x1d, 0xfe, 0xa8, 0x6, 0x8a, 0x60, 0x1b},
		},
	}

	for _, tt := range test {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.expectedResult, tt.txs.RootHash())
		})
	}
}
